<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<# var allEngines = new[] { "RhinoFakeEngine", "NSubstituteEngine", "MoqFakeEngine", "FakeItEasyEngine" };  #>
<# var allNamespaces = new[] { "Rhinomocks", "NSubstitute", "Moq", "FakeItEasy" };  #>
<# var supportsNetStandard = new[] { false, false, true, false };  #>
using System;
using Machine.Fakes.Adapters.Specs.SampleCode;
using Machine.Fakes.Internal;
using Machine.Specifications;
<# for (int i = 0; i < allEngines.Length; i++) { #>

<# if (!supportsNetStandard[i]) { #>
#if !NETSTANDARD
<# } #>


namespace Machine.Fakes.Adapters.Specs.<#= allNamespaces[i] #>
{

	using Machine.Fakes.Adapters.<#= allNamespaces[i] #>;
    
	[Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_method_was_not_configured_on_a_Fake_when_verifying_whether_it_was_accessed : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static Exception _exception;
        static IServiceContainer _fake;

        Establish context = () => _fake = FakeEngineGateway.Fake<IServiceContainer>();

        Because of = () => _exception = Catch.Exception(() => _fake.WasToldTo(f => f.GetService(null)));

        It should_throw_an_exception = () => _exception.ShouldNotBeNull();
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_command_was_configured_on_a_fake_when_verifying_whether_it_was_executed : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static Exception _exception;
        static IServiceContainer _fake;

        Establish context = () =>
        {
            _fake = FakeEngineGateway.Fake<IServiceContainer>();
            _fake.RemoveService(null);
        };

        Because of = () => _exception = Catch.Exception(() => _fake.WasToldTo(f => f.RemoveService(null)));

        It should_not_throw_an_exception = () => _exception.ShouldBeNull();
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_command_was_configured_on_a_fake_when_verifying_whether_it_was_executed_twice : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static Exception _exception;
        static IServiceContainer _fake;

        Establish context = () =>
        {
            _fake = FakeEngineGateway.Fake<IServiceContainer>();
            _fake.RemoveService(null);
            _fake.RemoveService(null);
        };

        Because of = () => _exception = Catch.Exception(() => _fake.WasToldTo(f => f.RemoveService(null)).Twice());

        It should_not_throw_an_exception = () => _exception.ShouldBeNull();
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_command_was_configured_on_a_fake_when_verifying_whether_it_was_executed_twice_but_was_only_executed_once : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static Exception _exception;
        static IServiceContainer _fake;

        Establish context = () =>
        {
            _fake = FakeEngineGateway.Fake<IServiceContainer>();
            _fake.RemoveService(null);
        };

        Because of = () => _exception = Catch.Exception(() => _fake.WasToldTo(f => f.RemoveService(null)).Twice());

        It should_throw_an_exception = () => _exception.ShouldNotBeNull();
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_command_was_configured_on_a_fake_when_verifying_whether_it_was_executed_only_once_but_was_excuted_twice : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static Exception _exception;
        static IServiceContainer _fake;

        Establish context = () =>
        {
            _fake = FakeEngineGateway.Fake<IServiceContainer>();
            _fake.RemoveService(null);
            _fake.RemoveService(null);
        };

        Because of = () => _exception = Catch.Exception(() => _fake.WasToldTo(f => f.RemoveService(null)).OnlyOnce());

        It should_throw_an_exception = () => _exception.ShouldNotBeNull();
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_query_was_configured_on_a_fake_when_verifying_whether_it_was_executed : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static Exception _exception;
        static IServiceContainer _fake;

        Establish context = () =>
        {
            _fake = FakeEngineGateway.Fake<IServiceContainer>();
            _fake.GetService(null);
        };

        Because of = () => _exception = Catch.Exception(() => _fake.WasToldTo(f => f.GetService(null)));

        It should_not_throw_an_exception = () => _exception.ShouldBeNull();
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_command_was_configured_on_a_fake_when_verifying_whether_it_was_executed_only_once_with_a_given_parameter_but_was_executed_twice_in_total : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static Exception _exception;
        static IServiceContainer _fake;

        Establish context = () =>
        {
            _fake = FakeEngineGateway.Fake<IServiceContainer>();
            _fake.RemoveService(typeof(Object));
            _fake.RemoveService(typeof(String));
        };

        Because of = () => _exception = Catch.Exception(() => _fake.WasToldTo(f => f.RemoveService(typeof(String))).OnlyOnce());

        It should_not_throw_an_exception = () => _exception.ShouldBeNull();
    }
}

<# if (!supportsNetStandard[i]) { #>
#endif
<# } #>
<# } #>