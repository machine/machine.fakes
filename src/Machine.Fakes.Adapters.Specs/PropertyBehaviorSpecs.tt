<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<# var allEngines = new[] { "RhinoFakeEngine", "NSubstituteEngine", "MoqFakeEngine", "FakeItEasyEngine" };  #>
<# var allNamespaces = new[] { "Rhinomocks", "NSubstitute", "Moq", "FakeItEasy" };  #>
<# var supportsNetStandard = new[] { false, true, true, true };  #>
<# var supportsNet46 = new[] { false, true, true, true }; #>
using Machine.Fakes.Adapters.Specs.SampleCode;
using Machine.Fakes.Internal;
using Machine.Specifications;

<# for (int i = 0; i < allEngines.Length; i++) { #>

<# if (!supportsNetStandard[i]) { #>
#if !NETSTANDARD && !NETCOREAPP
<# } #>
<# if (!supportsNet46[i]) { #>
#if !NET46
<# } #>

namespace Machine.Fakes.Adapters.Specs.<#= allNamespaces[i] #>
{

	using Machine.Fakes.Adapters.<#= allNamespaces[i] #>;

    [Subject(typeof(<#= allEngines[i] #>))]
    public class When_setting_a_simple_property_to_value_2 : WithCurrentEngine<<#= allEngines[i] #>>
    {
        Establish context = () => _fake = FakeEngineGateway.Fake<IProperties>();

        Because of = () => _fake.Prop = 2;

        It should_have_value_2 = () => _fake.Prop.ShouldEqual(2);
        
        static IProperties _fake;
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class When_setting_a_behavior_on_a_function : WithCurrentEngine<<#= allEngines[i] #>>
    {
        Establish context = () => _fake = FakeEngineGateway.Fake<IProperties>();

        Because of = () =>
        {
            _fake.WhenToldTo(f => f.TheFunction()).Return(true);
            _fake.Prop = 3;
        };

        It should_not_remove_the_property_behavior = () => _fake.Prop.ShouldEqual(3);
        
        static IProperties _fake;
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class When_setting_a_simple_property_to_value_2_and_then_to_3 : WithCurrentEngine<<#= allEngines[i] #>>
    {
        Establish context = () => _fake = FakeEngineGateway.Fake<IProperties>();

        Because of = () =>
        {
            _fake.Prop = 2;
            _fake.Prop = 3;
        };

        It should_have_value_3 = () => _fake.Prop.ShouldEqual(3);

        static IProperties _fake;
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class When_setting_up_a_return_value_for_a_property_with_getter_and_setter : WithCurrentEngine<<#= allEngines[i] #>>
    {
        Establish context = () => _fake = FakeEngineGateway.Fake<IProperties>();

        Because of = () => _fake.WhenToldTo(a => a.Prop).Return(2);

        It should_return_the_value = () => _fake.Prop.ShouldEqual(2);

        static IProperties _fake;
    }
}

<# if (!supportsNetStandard[i]) { #>
#endif
<# } #>
<# if (!supportsNet46[i]) { #>
#endif
<# } #>

<# } #>
